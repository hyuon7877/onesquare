"""
Django settings for onesquare project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import json
from pathlib import Path
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load secrets.json for sensitive settings
def get_secret(setting, secrets=None):
    """Get the secret variable or return explicit exception."""
    try:
        if secrets is None:
            secrets_file = BASE_DIR / 'secrets.json'
            if secrets_file.exists():
                with open(secrets_file) as f:
                    secrets = json.loads(f.read())
            else:
                # Fallback to environment variables
                secrets = {}
        
        if setting in secrets:
            return secrets[setting]
        else:
            # Try environment variable
            env_value = os.environ.get(setting)
            if env_value:
                return env_value
            else:
                error_msg = f"Set the {setting} environment variable or add to secrets.json"
                raise ImproperlyConfigured(error_msg)
    except KeyError:
        error_msg = f"Set the {setting} environment variable or add to secrets.json"
        raise ImproperlyConfigured(error_msg)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # 개발 환경

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]', '0.0.0.0']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'corsheaders',
    'widget_tweaks',
    
    # Local apps
    'apps.pwa',
    'apps.revenue',
    'apps.notion_api',
    'apps.auth_system',
    'apps.calendar_system',
    'apps.field_reports',  # 현장 리포트 (체크리스트 + 사진)
    'apps.dashboard',
    'apps.leave_management',
    'apps.time_management',
    'apps.feedback',
    'apps.ai_analytics',
    'apps.performance',
    'apps.security',
    'apps.monitoring',
]

MIDDLEWARE = [
    # 1. 보안 및 CORS (가장 먼저 실행)
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    
    # 2. 세션 관리
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # 3. 공통 미들웨어
    'django.middleware.common.CommonMiddleware',
    
    # 4. CSRF 보호
    'django.middleware.csrf.CsrfViewMiddleware',
    
    # 5. 인증
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # 6. 메시지
    'django.contrib.messages.middleware.MessageMiddleware',
    
    # 7. Clickjacking 보호
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # 8. 커스텀 성능 모니터링 (선택적)
    'apps.performance.middleware.PerformanceMonitoringMiddleware',
    'apps.performance.middleware.CacheOptimizationMiddleware',
    
    # 9. 커스텀 모니터링 (선택적)
    'apps.monitoring.middleware.SystemMonitoringMiddleware',
    'apps.monitoring.middleware.ErrorTrackingMiddleware',
    
    # 10. API Rate Limiting
    'apps.performance.middleware.APIRateLimitMiddleware',
    
    # 비활성화된 미들웨어 (문제 발생 가능성)
    # 'apps.performance.middleware.ResponseCompressionMiddleware',
    # 'apps.performance.middleware.QueryOptimizationMiddleware',
    # 'apps.performance.middleware.MemoryOptimizationMiddleware',
    # 'apps.monitoring.middleware.UserActivityTrackingMiddleware',
    # 'apps.monitoring.middleware.NotionAPIMonitoringMiddleware',
    # 'apps.security.middleware.CSRFEnhancementMiddleware',
    # 'apps.security.middleware.SecurityAuditMiddleware',
    # 'apps.security.middleware.SecretsProtectionMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database - 성능 최적화된 SQLite 설정 with Notion API integration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 30,
        },
        'CONN_MAX_AGE': 600,
        'CONN_HEALTH_CHECKS': True,
    }
}

# 데이터베이스 최적화 설정
DATABASE_ROUTERS = []  # 필요시 추가

# 자동 트랜잭션 관리
DATABASE_AUTOCOMMIT = True

# DB logging removed for simplicity

# Notion API Settings
NOTION_TOKEN = get_secret('NOTION_TOKEN') or get_secret('NOTION_API_KEY') or os.environ.get('NOTION_API_KEY', '')
NOTION_DATABASE_ID = get_secret('NOTION_DATABASE_ID') or os.environ.get('NOTION_DATABASE_ID', '')

# Notion API 동기화 설정 (성능 최적화)
NOTION_SYNC_INTERVAL_DEFAULT = 300  # 기본 동기화 간격 (초)
NOTION_CACHE_TIMEOUT = 600  # 캐시 타임아웃 증가 (초)
NOTION_MAX_RETRIES = 5  # API 호출 최대 재시도 횟수 증가
NOTION_RETRY_DELAY = 1  # 재시도 간격 (초)
NOTION_RATE_LIMIT_DELAY = 0.3  # Rate limit 방지 지연 증가 (초)
NOTION_BATCH_SIZE = 50  # 배치 처리 크기 최적화 (안정성 향상)
NOTION_CONNECTION_TIMEOUT = 30  # 연결 타임아웃 (초)
NOTION_READ_TIMEOUT = 60  # 읽기 타임아웃 (초)
NOTION_MAX_CONNECTIONS = 10  # 최대 동시 연결 수
NOTION_CONNECTION_POOL_SIZE = 5  # 연결 풀 크기
NOTION_KEEPALIVE_TIMEOUT = 300  # Keep-alive 타임아웃 (초)

# Notion API 캐싱 전략
NOTION_CACHE_STRATEGIES = {
    'databases': 3600,  # 데이터베이스 정보: 1시간
    'pages': 600,       # 페이지 데이터: 10분
    'blocks': 900,      # 블록 데이터: 15분
    'users': 7200,      # 사용자 정보: 2시간
    'search': 300,      # 검색 결과: 5분
}

# Notion API 최적화 설정
NOTION_ENABLE_COMPRESSION = True  # 응답 압축 활성화
NOTION_ENABLE_PARALLEL_REQUESTS = True  # 병렬 요청 활성화
NOTION_MAX_PARALLEL_REQUESTS = 3  # 최대 병렬 요청 수 (Rate limit 고려)
NOTION_ENABLE_REQUEST_DEDUPLICATION = True  # 중복 요청 방지

# Notion 모니터링 설정
NOTION_ALERT_THRESHOLD_MINUTES = 30  # 알림 임계값 (분)
NOTION_MAX_FAILED_SYNCS = 3  # 최대 허용 실패 횟수
NOTION_ADMIN_EMAILS = os.environ.get('NOTION_ADMIN_EMAILS', '').split(',') if os.environ.get('NOTION_ADMIN_EMAILS') else []

# Notion API 로깅 레벨
NOTION_LOG_LEVEL = os.environ.get('NOTION_LOG_LEVEL', 'INFO')
NOTION_DEBUG_MODE = os.environ.get('NOTION_DEBUG_MODE', '0').lower() in ['true', '1', 't']

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'ko-kr'
TIME_ZONE = 'Asia/Seoul'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'auth_system.CustomUser'

# Django REST Framework (성능 최적화)
# Django REST Framework settings removed - using Django basic views only

# CORS Settings for PWA
CORS_ALLOWED_ORIGINS = [
    "https://localhost:8443",
    "https://127.0.0.1:8443",
    "https://0.0.0.0:8443",
]

CORS_ALLOW_CREDENTIALS = True

# PWA Settings
PWA_APP_NAME = 'OneSquare'
PWA_APP_DESCRIPTION = "통합 팀 관리 시스템"
PWA_APP_THEME_COLOR = '#0A84FF'
PWA_APP_BACKGROUND_COLOR = '#FFFFFF'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/'
PWA_APP_ORIENTATION = 'any'
PWA_APP_START_URL = '/'
PWA_APP_STATUS_BAR_COLOR = 'default'
PWA_APP_ICONS = [
    {
        'src': '/static/images/icons/icon-72x72.png',
        'sizes': '72x72'
    },
    {
        'src': '/static/images/icons/icon-96x96.png',
        'sizes': '96x96'
    },
    {
        'src': '/static/images/icons/icon-128x128.png',
        'sizes': '128x128'
    },
    {
        'src': '/static/images/icons/icon-144x144.png',
        'sizes': '144x144'
    },
    {
        'src': '/static/images/icons/icon-152x152.png',
        'sizes': '152x152'
    },
    {
        'src': '/static/images/icons/icon-192x192.png',
        'sizes': '192x192'
    },
    {
        'src': '/static/images/icons/icon-384x384.png',
        'sizes': '384x384'
    },
    {
        'src': '/static/images/icons/icon-512x512.png',
        'sizes': '512x512'
    },
]
PWA_APP_ICONS_APPLE = [
    {
        'src': '/static/images/icons/icon-152x152.png',
        'sizes': '152x152'
    },
]
PWA_APP_SPLASH_SCREEN = [
    {
        'src': '/static/images/icons/splash-640x1136.png',
        'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'
    }
]
PWA_APP_DIR = 'ltr'
PWA_APP_LANG = 'ko-KR'

# CSRF Settings for API and PWA
CSRF_TRUSTED_ORIGINS = [
    "https://localhost:8443",
    "https://127.0.0.1:8443",
    "https://0.0.0.0:8443",
]

# CSRF Cookie Settings
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_AGE = 31449600  # 1 year
CSRF_COOKIE_DOMAIN = None
CSRF_COOKIE_PATH = '/'
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = False  # PWA에서 JavaScript 접근 필요
CSRF_COOKIE_SAMESITE = 'Lax'

# Session Security
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_AGE = 7200  # 2시간
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True

# Security Settings (개발 환경용 - HTTPS 완전 비활성화)
SECURE_BROWSER_XSS_FILTER = False
SECURE_CONTENT_TYPE_NOSNIFF = False
SECURE_REFERRER_POLICY = None

# HTTPS 설정 완전 비활성화 (개발 환경)
SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SECURE_REDIRECT_EXEMPT = []
SECURE_PROXY_SSL_HEADER = None

# 추가 Django 보안 설정 비활성화
SECURE_CROSS_ORIGIN_OPENER_POLICY = None
X_FRAME_OPTIONS = 'DENY'
SILENCED_SYSTEM_CHECKS = []

# 파일 업로드 보안
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000
DATA_UPLOAD_MAX_NUMBER_FILES = 100

# 비밀번호 검증 강화
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'user_attributes': ['username', 'first_name', 'last_name', 'email'],
            'max_similarity': 0.7,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 10,  # 최소 10자
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    # 커스텀 패스워드 검증 추가
    {
        'NAME': 'apps.security.validators.ComplexPasswordValidator',
    },
]

# 로그인 보안 설정
LOGIN_ATTEMPTS_LIMIT = 5
LOGIN_ATTEMPTS_TIMEOUT = 1800  # 30분
LOGOUT_REDIRECT_URL = '/auth/login/'
LOGIN_URL = '/auth/login/'

# API 보안 설정
API_RATE_LIMITING = {
    'ENABLE': True,
    'DEFAULT_THROTTLE_RATES': {
        'anon': '200/hour',
        'user': '2000/hour',
        'login': '10/min',
        'api': '1000/hour',
        'notion': '500/hour',
    },
    'BURST_RATES': {
        'login': '3/min',
        'register': '2/min',
    }
}

# 로그 디렉토리 설정
LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)

# 간단한 로깅 설정
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_DIR / 'django.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console'],
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# 인증 시스템 추가 설정
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# 세션 및 보안 추가 설정
ALLOW_MULTIPLE_SESSIONS = True  # 다중 세션 허용
MAX_SESSIONS_PER_USER = 3  # 사용자당 최대 세션 수
MAINTENANCE_MODE = False  # 유지보수 모드

# OTP 설정
OTP_EXPIRY_MINUTES = 5  # OTP 만료 시간 (분)
OTP_LENGTH = 6  # OTP 코드 길이

# 이메일 설정 (개발/운영 환경별 설정)
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = get_secret('EMAIL_HOST')
    EMAIL_PORT = get_secret('EMAIL_PORT')
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = get_secret('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = get_secret('EMAIL_HOST_PASSWORD')

DEFAULT_FROM_EMAIL = 'OneSquare <noreply@onesquare.com>'

# 캐시 설정 (향상된 다층 캐시 전략)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'onesquare-cache',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 5000,  # 증가된 캐시 엔트리
            'CULL_FREQUENCY': 4,
        }
    },
    # API 응답 전용 캐시
    'api': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'onesquare-api-cache',
        'TIMEOUT': 180,  # API는 더 짧은 TTL
        'OPTIONS': {
            'MAX_ENTRIES': 2000,
            'CULL_FREQUENCY': 4,
        }
    },
    # Notion 데이터 캐시
    'notion': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'onesquare-notion-cache', 
        'TIMEOUT': 600,  # Notion은 더 긴 TTL
        'OPTIONS': {
            'MAX_ENTRIES': 1500,
            'CULL_FREQUENCY': 3,
        }
    },
    # 세션 캐시
    'sessions': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'onesquare-sessions-cache',
        'TIMEOUT': 7200,  # 세션과 동일한 시간
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 2,
        }
    }
}

# 파일 업로드 설정
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644

# 성능 최적화 추가 설정
# =========================

# 쿼리 최적화 설정
USE_TZ = True
USE_L10N = True

# 템플릿 캐싱 (프로덕션)
if not DEBUG:
    # loaders 설정 시 APP_DIRS를 False로 설정해야 함
    TEMPLATES[0]['APP_DIRS'] = False
    TEMPLATES[0]['OPTIONS']['loaders'] = [
        ('django.template.loaders.cached.Loader', [
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
        ]),
    ]

# 정적 파일 최적화
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# 미들웨어 최적화 (성능 중요도 순으로 정렬)
if not DEBUG:
    # 프로덕션 환경에서 성능 최적화 미들웨어 추가
    MIDDLEWARE.insert(0, 'django.middleware.cache.UpdateCacheMiddleware')
    MIDDLEWARE.append('django.middleware.cache.FetchFromCacheMiddleware')

# 압축 및 최적화 설정
USE_ETAGS = True  # ETag 헤더 사용
PREPEND_WWW = False  # www 리다이렉트 비활성화

# 세션 최적화
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'sessions'

# 메시지 프레임워크 최적화
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# 성능 모니터링 설정
PERFORMANCE_MONITORING = {
    'ENABLE_QUERY_LOGGING': DEBUG,
    'ENABLE_SLOW_QUERY_LOGGING': True,
    'SLOW_QUERY_THRESHOLD': 1.0,  # 1초 이상 쿼리 로깅
    'ENABLE_MEMORY_MONITORING': DEBUG,
    'ENABLE_CACHE_MONITORING': True,
}

# 종합 시스템 모니터링 설정
SYSTEM_MONITORING = {
    'ENABLE_MONITORING': True,
    'MONITORING_INTERVAL': 60,  # 시스템 모니터링 간격 (초)
    'METRICS_RETENTION_DAYS': 30,  # 메트릭 보관 기간
    'LOG_RETENTION_DAYS': 90,  # 로그 보관 기간
    
    # 리소스 임계값 설정
    'CPU_WARNING_THRESHOLD': 80,     # CPU 사용률 경고 임계값 (%)
    'MEMORY_WARNING_THRESHOLD': 85,  # 메모리 사용률 경고 임계값 (%)
    'DISK_WARNING_THRESHOLD': 90,    # 디스크 사용률 경고 임계값 (%)
    'SLOW_REQUEST_THRESHOLD_MS': 500,  # 느린 요청 임계값 (ms)
    
    # 알림 설정
    'ENABLE_ALERTS': True,
    'ALERT_EMAIL_RECIPIENTS': [],  # 알림 받을 이메일 주소들
    'ENABLE_SLACK_ALERTS': False,  # Slack 알림 (나중에 구현)
    
    # 자동 정리 설정
    'AUTO_CLEANUP_ENABLED': True,
    'CLEANUP_SCHEDULE': '0 2 * * 0',  # 매주 일요일 오전 2시 (cron 형식)
}

# Notion API 모니터링 설정
NOTION_API_MONITORING = {
    'ENABLE_MONITORING': True,
    'SUCCESS_RATE_THRESHOLD': 95,  # 성공률 임계값 (%)
    'RESPONSE_TIME_THRESHOLD_MS': 2000,  # 응답 시간 임계값 (ms)
    'ENABLE_DETAILED_LOGGING': True,
    'LOG_REQUEST_BODY': DEBUG,  # 요청 본문 로깅 (개발 환경만)
    'LOG_RESPONSE_BODY': False,  # 응답 본문 로깅 (보안상 비활성화)
}

# 사용자 활동 모니터링 설정
USER_ACTIVITY_MONITORING = {
    'ENABLE_TRACKING': True,
    'TRACK_ANONYMOUS_USERS': True,
    'SESSION_TRACKING_ENABLED': True,
    'DETAILED_PATH_TRACKING': True,
    'MAX_SESSION_ACTIVITIES': 100,  # 세션당 최대 활동 기록 수
    'PRIVACY_MODE': False,  # 개인정보 보호 모드 (IP 해싱 등)
}

# 에러 추적 설정
ERROR_TRACKING = {
    'ENABLE_ERROR_TRACKING': True,
    'TRACK_4XX_ERRORS': True,
    'TRACK_5XX_ERRORS': True,
    'TRACK_EXCEPTIONS': True,
    'MAX_STACK_TRACE_LENGTH': 2000,  # 스택 트레이스 최대 길이
    'AUTO_RESOLVE_AFTER_DAYS': 30,  # 자동 해결 처리 기간
    'GROUP_SIMILAR_ERRORS': True,  # 유사한 에러 그룹화
}

# 보안 모니터링 설정
SECURITY_MONITORING = {
    'ENABLE_SECURITY_LOGGING': True,
    'TRACK_FAILED_LOGINS': True,
    'TRACK_PERMISSION_DENIALS': True,
    'TRACK_SUSPICIOUS_ACTIVITY': True,
    'IP_BLOCKING_ENABLED': False,  # IP 차단 기능 (나중에 구현)
    'MAX_FAILED_ATTEMPTS': 10,  # 최대 실패 시도 횟수
    'LOCKOUT_DURATION_MINUTES': 30,  # 계정 잠금 시간
}

# ORM 최적화 설정
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 트랜잭션 최적화
ATOMIC_REQUESTS = True  # 기본적으로 모든 뷰를 트랜잭션으로 감쌈

# API 응답 최적화
API_RESPONSE_OPTIMIZATION = {
    'ENABLE_GZIP': True,
    'ENABLE_ETAG': True,
    'ENABLE_LAST_MODIFIED': True,
    'ENABLE_VARY_HEADER': True,
    'CACHE_CONTROL_MAX_AGE': 300,  # 5분
}

# 백그라운드 작업 설정 (향후 Celery 통합 준비)
BACKGROUND_TASKS = {
    'ENABLE_ASYNC_PROCESSING': True,
    'MAX_CONCURRENT_TASKS': 5,
    'TASK_TIMEOUT': 300,  # 5분
    'RETRY_DELAY': 60,    # 1분
    'MAX_RETRIES': 3,
}

# 메모리 사용량 최적화
MEMORY_OPTIMIZATION = {
    'QUERYSET_ITERATOR_CHUNK_SIZE': 1000,
    'BULK_CREATE_BATCH_SIZE': 1000,
    'SELECT_RELATED_MAX_DEPTH': 3,
    'PREFETCH_RELATED_BATCH_SIZE': 500,
}

# Notion API 성능 모니터링
NOTION_PERFORMANCE_MONITORING = {
    'ENABLE_METRICS': True,
    'METRICS_INTERVAL': 60,  # 1분마다 메트릭 수집
    'SLOW_REQUEST_THRESHOLD': 5.0,  # 5초 이상 요청 로깅
    'SUCCESS_RATE_THRESHOLD': 0.95,  # 95% 이하시 알림
}

# 캐시 워밍업 설정
CACHE_WARMUP = {
    'ENABLE_ON_STARTUP': True,
    'CRITICAL_ENDPOINTS': [
        '/api/auth/status/',
        '/api/dashboard/data/',
        '/api/notifications/unread/',
    ],
    'WARMUP_DELAY': 30,  # 30초 후 워밍업 시작
}