# OneSquare - 통합 팀 관리 시스템 PRD (Product Requirements Document)

## 1. 프로젝트 개요

### 1.1 프로젝트 명
OneSquare - 팀 관리자용 일정/업무/매출 통합 관리 시스템

### 1.2 프로젝트 목표
팀원 및 파트너를 통합 관리할 수 있는 PWA 기반 관리 시스템을 개발하여, 현장 파트너와 관리자 간의 효율적인 협업 환경을 구축하고 모든 데이터를 Notion API를 통해 실시간으로 동기화하는 완전한 비즈니스 솔루션 제공

### 1.3 핵심 가치 제안
- **2-Tier 시스템**: 현장 리포트 시스템(파트너용) + 통합 관리 시스템(관리자용)
- **완전 오프라인 지원**: PWA 기반으로 80% 이상 기능을 오프라인에서 사용 가능
- **실시간 Notion 동기화**: 99% 정확도의 실시간 데이터 동기화
- **모바일 앱 수준 UX**: 네이티브 앱과 같은 사용자 경험

### 1.4 성공 지표
- Notion 동기화 정확도: 99% 이상
- 오프라인 기능 사용률: 80% 이상
- 앱 로딩 속도: 3초 이내
- PWA 설치율: 70% 이상
- 사용자 만족도: 4.5/5.0 이상

## 2. 시스템 아키텍처

### 2.1 전체 시스템 구조
```
현장 리포트 시스템(파트너 PWA) ←→ 통합 관리 시스템(관리자 웹) ←→ Notion Database(데이터 저장소)
```

### 2.2 기술 스택 (CLAUDE.md 준수)

#### 2.2.1 허용된 기술
- **Backend**: Django 5 (REST API 서버)
- **Database**: Notion API (클라우드 데이터베이스)
- **PWA Frontend**:
  - HTML5, CSS3, JavaScript ES6+
  - Service Worker (오프라인 캐싱)
  - Web App Manifest (앱 설치)
  - Bootstrap 5 (CSS 프레임워크)
  - Fetch API (비동기 통신)
- **API**: Django REST Framework (DRF)
- **인증**: Django 내장 인증 + Notion OAuth
- **캐싱**: localStorage, sessionStorage, IndexedDB
- **환경**: Docker Compose (django, nginx 컨테이너)
- **HTTPS**: PWA 필수 요구사항

#### 2.2.2 금지된 기술 (CLAUDE.md 준수)
- React, Vue, Angular 등 복잡한 SPA 프레임워크
- 전통적인 MariaDB, PostgreSQL 등 관계형 DB
- Redis, Celery, RabbitMQ 등 메시지 큐 (개발용 제외)
- WebSocket, Server-Sent Events (PWA 표준 기능 우선)
- jQuery 사용 최소화 (Vanilla JS 또는 Fetch API 우선)

### 2.3 배포 환경
- **웹 포트**: 8081 (HTTPS 필수)
- **메인 페이지**: https://localhost:8081/ (PWA 설치 가능)
- **API 엔드포인트**: https://localhost:8081/api/
- **관리자 페이지**: https://localhost:8081/admin/
- **컨테이너**: Docker + Docker Compose
- **웹 서버**: Nginx (HTTPS 필수)
- **애플리케이션 서버**: Gunicorn

## 3. 사용자 정의 및 권한 체계

### 3.1 사용자 유형

#### 3.1.1 최고 관리자 (Super Admin)
- 모든 기능 접근 가능
- 사용자 권한 설정 및 새로운 권한 그룹 생성
- 시스템 설정 변경 (운영시간, 사용자 유형 등)
- 전체 데이터 통계 및 분석
- Notion Database 연동 설정 및 관리
- 매출 정보 완전 접근

#### 3.1.2 중간 관리자 (Manager)
- 담당 팀원/파트너 일정 관리 (등록/수정/삭제)
- 담당 그룹 일정 전체 조회
- 연차 승인/반려
- 담당 그룹 매출 현황 조회
- 매출 정보 제한적 접근 (담당 구역/팀원 한정)

#### 3.1.3 팀원 (Staff)
- 개인 일정 조회 및 제한적 수정
- 연차 신청 기능
- 개인 대시보드 이용
- 파트너 정보 검색 및 조회 (Notion Database 연동)
- 개인 매출 정보 조회 (권한 범위 내)

#### 3.1.4 파트너 (Partner)
- 파트너 전용 PWA 대시보드 이용
- 파트너 일정 조회 및 제한적 수정
- 현장 리포트 작성 및 전송
- 개인 매출 정보 조회 (본인 관련만)

#### 3.1.5 도급사 (Contractor)
- 도급 프로젝트 관련 일정 조회
- 도급 업무 진행 상태 관리
- 프로젝트별 매출 정보 조회

#### 3.1.6 커스텀 권한 그룹
- 관리자가 필요에 따라 새로운 권한 그룹 생성 가능
- 세부 권한 조합으로 맞춤형 접근 권한 설정

### 3.2 인증 시스템

#### 3.2.1 파트너 인증
- 휴대폰 OTP (SMS 기반 일회용 비밀번호)
- 간편 인증 (현장 작업 환경 최적화)
- 휴대폰 분실 대응 (관리자 승인 통한 번호 변경)
- 자동 만료: 8시간

#### 3.2.2 관리자/팀원 인증
- 이메일 + 비밀번호
- 단일 인증 (빠른 관리 업무 접근)
- 복합 문자 비밀번호 + 정기 변경 권장
- 자동 만료: 10시간

#### 3.2.3 보안 정책
- 세션 쿠키 + CSRF 토큰 기반 보안
- 동시 로그인 제한 및 이상 접근 감지
- HTTPS 강제 적용 (PWA 필수 요구사항)

## 4. 주요 기능 요구사항

### 4.1 사용자 관리 시스템

#### 4.1.1 다중 사용자 유형 관리
- 팀원, 관리자, 파트너, 도급사 + 커스텀 유형
- 권한 그룹 관리 및 세부 권한 설정
- 다계층 조직 구조 지원
- 실시간 권한 변경 및 이력 관리

#### 4.1.2 파트너 정보 관리 (Notion Database 연동)
- 실시간 동기화 및 자동 업데이트
- 통합 검색 (파트너명, 연락처, 담당 구역, 전문 분야)
- 빠른 연락 연결 (전화, 문자, 이메일)
- 태그 필터링 및 실적 현황 표시

### 4.2 통합 캘린더 및 일정 관리

#### 4.2.1 일정 CRUD (권한별 차등 적용)
- **등록**: 날짜, 시간, 업무 내용, 담당자 지정, Notion 관리공간 연계
- **조회**: 권한에 따른 조회 범위 제한
- **수정**: 실시간 수정 및 이력 관리
- **삭제**: 삭제 권한 및 삭제 로그 관리

#### 4.2.2 고급 일정 기능
- 빠른 일정 등록 인터페이스
- 일정 템플릿 및 복사 기능
- 일정 충돌 감지 및 알림
- 드래그 & 드롭 인터페이스

#### 4.2.3 통합 캘린더 시스템 (FullCalendar 기반 - 금지 기술 아님)
- **뷰 옵션**: 주간/일간/월별 캘린더
- **업무 스케줄링**: 정기 업무 및 1회성 업무 설정
- **필터링**: 팀원별, 관리공간별, 프로젝트별 필터링
- **상태 관리**: 칸반 보드 (예정/진행중/완료/보류)
- **통계 대시보드**: 팀원별 일정 및 매출 현황

### 4.3 연차 관리 시스템
- 연차 신청 (사유, 기간)
- 승인 프로세스 (관리자 승인/반려)
- 연차 현황 및 잔여 연차 표시
- 팀 전체 연차 현황 달력 뷰
- 실시간 알림 시스템

### 4.4 업무시간 관리 시스템

#### 4.4.1 시간 추적 및 관리
- 기준 시간 설정 (하루 8시간, 관리자 변경 가능)
- 실제 근무시간 기록 (시작/종료시간)
- 시간 초과/미달 시각적 표시 (색상 구분)

#### 4.4.2 업무시간 통계
- 일별/주별/월별 통계
- 목표 달성률 표시
- 엑셀 내보내기 기능

### 4.5 매출 관리 시스템 (Notion Database 연동 - 권한 기반)

#### 4.5.1 Notion 매출 데이터 연동
- 실시간 매출 데이터 동기화 (읽기 전용)
- 자동 업데이트 및 단방향 동기화

#### 4.5.2 매출 정보 권한 관리
- 완전 접근/부서별 접근/개인별 접근/요약 접근/접근 금지
- 세밀한 권한 설정 (일별/월별/히스토리/예상 매출)
- 금액 마스킹 및 비율 표시

#### 4.5.3 매출 통계 및 리포트
- 권한별 매출 분석 및 차트
- AI 기반 매출 예측 (과거 데이터 활용)

### 4.6 알림 및 대시보드 시스템

#### 4.6.1 PWA 실시간 알림
- 일정 관련 알림 (등록/수정/삭제/충돌)
- 연차 관련 알림 (신청/승인/반려)
- 업무시간 관련 알림 (부족/초과)
- PWA 푸시 알림 및 배지 표시

#### 4.6.2 개인 대시보드 (권한별)
- 개인 일정 (금일/금주)
- 근무 현황 및 연차 현황
- 개인 매출 현황 (권한 범위 내)
- 파트너 빠른 검색

### 4.7 Notion Database 통합 뷰어 (동적 확장)

#### 4.7.1 기존 Notion DB 연동
- **업무현황판**: 실시간 업무 진행 상태 대시보드
- **파트너현황**: 파트너별 매출, 일정, 성과 통합 뷰
- **관리공간**: 운영 관련 설정 및 관리 데이터
- **파트너 정보**: 상세 정보, 연락처, 담당 구역, 실적

#### 4.7.2 동적 Database 연동 시스템
- DB 추가 인터페이스 (관리자 UI)
- 자동 스키마 감지 및 필드 매핑
- 커스텀 뷰 자동 생성
- 실시간 연동 및 권한 매핑

#### 4.7.3 통합 뷰어 기능
- 임베디드 뷰 및 별도 창 모드
- 다중 DB 대시보드
- 필터링 연동 및 실시간 동기화

## 5. 현장 리포트 시스템 (파트너 전용 PWA)

### 5.1 시스템 구조 및 데이터 흐름
- 파트너 → 현장 리포트 PWA → 통합 관리 시스템 → Notion Database
- 실시간 데이터 전송 및 동기화
- 양방향 실시간 반영

### 5.2 현장 업무 흐름 (모바일 최적화)
1. **본사 공지사항**: 고정 공지 + 일반 공지 확인
2. **오늘의 업무 확인**: 정기 업무 및 1회성 업무 체크
3. **업무 시작 버튼**: 가장 우선적으로 표시
4. **체크리스트**: 필수/선택 항목 구분
5. **예시 사진 보기**: 사진 촬영 가이드 확인
6. **사진 촬영**: 자동/원본 압축 (기본 1MB)
7. **비품 재고 체크**: 사진 촬영 후 비품 상태 확인
8. **추가 내용 작성**: 기타 특이사항 기록
9. **리포트 전송**: 통합 관리 시스템으로 즉시 전송

### 5.3 PWA 핵심 기능
- **오프라인 지원**: Service Worker 기반 캐싱
- **백그라운드 동기화**: 네트워크 복구 시 자동 전송
- **푸시 알림**: 중요 알림 실시간 수신
- **앱 설치**: 홈 화면에 앱 아이콘 추가

### 5.4 현장 전용 기능
- **모바일 최적화**: 장갑 착용 상태에서도 쉬운 터치
- **원터치 입력**: 반복 업무 빠른 입력
- **템플릿 시스템**: 빠른 입력 템플릿
- **자동 완성**: 이전 기록 기반 자동 완성
- **실시간 피드백**: 관리자 피드백 즉시 확인

### 5.5 업무 시간 관리
- 업무 시작 버튼 클릭 시 시작 시간 자동 기록
- 리포트 전송 완료 시 종료 시간 자동 설정
- 수동 시간 수정 가능 (지연 시)
- 비합리적 시간 입력 시 경고

### 5.6 체크리스트 및 비품 관리
- **필수 항목**: 빨간색 표시, 진행 차단
- **선택 항목**: 파란색 표시, 통계 활용
- **비품 재고 체크**: Notion 연동, 이력 관리
- **동적 관리**: 실시간 변경, 템플릿별 설정

### 5.7 데이터 최적화
- **자동 저장**: 임시 저장, 자동 복구
- **미디어 압축**: 이미지 1MB, 동영상 압축
- **빠른 전송**: 재시도 로직 포함

## 6. 통합 관리 시스템 (관리자 전용)

### 6.1 관리자 대시보드
- **팀 전체 현황**: 실시간 팀 상태 요약
- **오늘의 일정**: 팀 전체 금일 일정 현황
- **매출 현황**: 권한에 따른 매출 정보 표시
- **현장점검 관리**: 통합 캘린더 연동
- **알림 센터**: 미확인 알림 목록
- **빠른 액세스**: 주요 기능 바로가기

### 6.2 AI 데이터 분석 기능
- **매출 예측**: 과거 데이터 기반 트렌드 분석
- **업무 효율성 분석**: 팀원별 패턴 및 생산성
- **일정 최적화**: AI 기반 최적 일정 배치 추천
- **이상 패턴 감지**: 급격한 변화 감지 및 알림

### 6.3 AI 인사이트 시스템
- **성과 분석**: 개인별/팀별 성과 지표 및 개선 제안
- **리소스 최적화**: 인력 배치 및 업무 분배 추천
- **위험 요소 예측**: 번아웃, 이직 가능성 예측
- **목표 달성 확률**: 현재 진행도 기반 확률 계산

### 6.4 현장 리포트 통합 뷰
- **실시간 수신**: 파트너 전송 리포트 즉시 확인
- **대시보드 통합**: 모든 현장 리포트 현황 조회
- **진행 상황 모니터링**: 파트너별 제출 현황 추적

### 6.5 고급 품질 관리
- **사진별 피드백**: 특정 사진에 직접 피드백
- **인라인 댓글**: 사진 위 직접 댓글 및 마킹
- **피드백 알림**: 파트너 앱에 즉시 알림
- **피드백 이력**: 사진별 히스토리 관리

### 6.6 관리자 제어 기능
- **현장 업무 관리**: 정기/1회성 업무 스케줄 설정
- **체크리스트 관리**: 필수/선택 항목 설정
- **예시 사진 관리**: 공간별 라이브러리 관리
- **공지사항 관리**: 고정/일반 공지 작성 및 푸시
- **매출 정보 권한 설정**: 사용자별/그룹별 권한 관리

## 7. Notion Database 연동 시스템

### 7.1 자동 데이터 전송
- **실시간 동기화**: 현장 리포트 → 통합 관리 → Notion DB
- **데이터 매핑**: 필드와 Notion DB 속성 자동 매핑
- **파일 업로드**: 사진/동영상 Notion 페이지 자동 첨부
- **상태 동기화**: 완료/미완료/진행중 실시간 반영

### 7.2 데이터 무결성 보장
- **중복 방지**: 동일 리포트 중복 전송 방지
- **오류 복구**: API 장애 시 로컬 큐잉 후 재전송
- **데이터 검증**: 필수 필드 누락 시 알림
- **이력 관리**: 전송 이력 및 오류 로그 관리

### 7.3 Notion DB 구조 최적화
- **동적 스키마**: 구조 변경 시 자동 업데이트
- **관계형 데이터**: 파트너, 공간, 업무 자동 연결
- **태그 시스템**: 자동 태깅으로 분류 및 검색 최적화
- **백업 전략**: 중요 데이터 자동 백업 및 복구

### 7.4 핵심 구현 요구사항
- **유연한 스키마 매핑**: Notion DB 변경에 자동 적응
- **동적 데이터 변환**: 런타임 스키마 감지 후 Django 호환 변환
- **무정전 연동**: 스키마 변경 시에도 서비스 중단 없음
- **관리자 친화적**: Database ID만 입력하면 자동 연동
- **성능 최적화**: 스키마 정보 캐싱으로 API 호출 최소화

## 8. 멀티미디어 피드백 시스템

### 8.1 양방향 소통 시스템
- **실시간 피드백 교환**: 파트너 ↔ 관리자 간 실시간 교환
- **스레드형 대화**: 연속적인 대화 지원
- **피드백 분류**: 업무/개선/문제 카테고리별 분류
- **우선순위 설정**: 긴급도 및 중요도 설정

### 8.2 멀티미디어 기능
- **파일 업로드**: 사진(JPEG,PNG,WEBP), 동영상(MP4,AVI,MOV), 문서(PDF,DOC,XLS)
- **미리보기**: 업로드된 미디어 인라인 미리보기
- **버전 관리**: 수정 파일의 버전 히스토리
- **자동 압축**: 관리자 설정에 따른 파일 최적화

### 8.3 피드백 수집 및 관리
- **360도 피드백**: 상사, 동료, 하급자 다면 평가
- **실시간 피드백**: 업무 완료 시점 즉시 수집
- **비주얼 피드백**: 이미지/동영상 기반 결과물 피드백
- **작업 완료 인증**: 완료 작업 사진/영상 인증

### 8.4 분석 및 리포트
- **피드백 통계**: 유형별, 부서별, 개인별 현황
- **멀티미디어 분석**: 이미지 분류 및 태깅
- **AI 텍스트 분석**: 감정/키워드 분석
- **트렌드 분석**: 시간별 패턴 및 이슈 트래킹

## 9. 선택적 기능

### 9.1 텔레그램 봇 연동 (선택적 설정)
- **쉬운 설정**: 관리자 UI에서 봇 토큰 간단 입력
- **기능별 ON/OFF**: 일정/연차/업무시간 알림 선택
- **사용자별 설정**: 개인별 알림 유형 선택
- **명령어 기반 조회**: /today, /schedule, /leave, /my_sales, /partner

## 10. 시스템 설정 및 확장성

### 10.1 운영 환경 설정
- **운영 시간**: 설정 변경 가능 (기본: 일요일 저녁 ~ 목요일 저녁)
- **팀별/파트너별 개별 운영시간 설정**
- **기준 근무시간**: 하루 8시간 (변경 가능)
- **휴무일 설정**: 공휴일, 회사 휴무일, 파트너별 휴무일

### 10.2 시스템 설정 (확장 가능)
- **사용자 유형 관리**: 새로운 유형 추가 및 설정
- **매출 목표 설정**: 개인별/팀별/파트너별 목표
- **알림 설정**: 유형별 on/off (PWA 푸시 알림 포함)
- **PWA 설정**: 오프라인 동기화, 백그라운드 업데이트
- **Notion 연동 관리**: 새 Database 추가/제거, 동기화 설정

## 11. 성능 및 보안 요구사항

### 11.1 성능 요구사항
- **로딩 속도**: 3초 이내
- **Notion 동기화**: 99% 정확도
- **오프라인 기능**: 80% 이상 기능 사용 가능
- **모바일 최적화**: 네이티브 앱 수준 UX
- **HTTPS 필수**: SSL 없으면 PWA 기능 작동 안 함

### 11.2 보안 요구사항
- **Django 권한 시스템 + Notion 접근 권한 이중 보안**
- **secrets.json**: API 키, DB 패스워드 등 민감 정보 관리
- **HTTPS 강제 적용** (PWA 필수 요구사항)
- **세션 쿠키 + CSRF 토큰** 기반 보안 강화
- **동시 로그인 제한** 및 이상 접근 감지

### 11.3 데이터 관리
- **Notion 연동**: 모든 데이터를 Notion Database에 저장 및 관리
- **실시간 동기화**: Notion과 앱 간 실시간 데이터 동기화
- **오프라인 지원**: PWA 캐싱으로 오프라인 조회 가능
- **데이터 백업**: Notion 자체 백업 + Django 로컬 캐싱
- **검색 기능**: 일정, 팀원, 매출 데이터 통합 검색

## 12. 개발 및 배포 계획

### 12.1 개발 환경
- **프로젝트 루트**: `/home/user/onesquare`
- **Docker 기반**: docker-compose.yml 사용
- **개발 포트**: 8081 (HTTPS 필수)
- **개발 도구**: VSCode, Docker Desktop, Git

### 12.2 프로젝트 구조 (CLAUDE.md 준수)
```
onesquare/
├── docker-compose.yml
├── requirements.txt
├── src/
│   ├── config/             # Django 메인 설정
│   ├── apps/               # Django API 앱들
│   │   ├── notion_api/     # Notion API 연동
│   │   ├── user_auth/      # 사용자 인증 API
│   │   └── pwa_core/       # PWA 핵심 기능
│   ├── static/             # PWA 정적 리소스
│   │   ├── js/sw.js        # Service Worker
│   │   ├── js/app.js       # PWA 메인 로직
│   │   ├── js/modules/     # 기능별 JS 모듈
│   │   ├── manifest.json   # PWA 매니페스트
│   │   └── icons/          # PWA 아이콘
│   └── templates/          # PWA HTML 템플릿
│       ├── base.html       # PWA 기본 템플릿
│       ├── offline.html    # 오프라인 페이지
│       └── pwa/            # PWA 전용 템플릿
└── .taskmaster/            # Task Master 설정
    ├── CLAUDE.md           # 개발 지침
    └── docs/prd.txt        # 이 문서
```

### 12.3 배포 전략
- **Stage 1**: 기본 PWA 및 Notion 연동 개발
- **Stage 2**: 현장 리포트 시스템 구축
- **Stage 3**: 통합 관리 시스템 완성
- **Stage 4**: AI 분석 및 고급 기능 추가
- **Stage 5**: 성능 최적화 및 보안 강화

## 13. 프로젝트 제약사항 및 고려사항

### 13.1 기술적 제약사항 (CLAUDE.md 준수)
- **단순함 우선**: 복잡한 프레임워크보다 완벽한 기능 구현에 집중
- **Django 표준 준수**: Django 내장 기능 최대 활용
- **PWA 표준 준수**: Service Worker, Manifest 등 PWA 표준 기능 사용
- **모바일 우선**: 모바일 환경에서의 사용성을 최우선으로 고려

### 13.2 운영상 고려사항
- **팀별 커스터마이징**: 각 팀의 운영 방식에 맞춘 유연한 설정
- **데이터 이전**: 기존 Tally 폼 데이터 이전 계획
- **사용자 교육**: 새 시스템 도입을 위한 교육 계획
- **점진적 도입**: 단계별 기능 출시를 통한 안정적 전환

### 13.3 성공 요소
- **사용자 중심 설계**: 실제 사용자(파트너, 관리자)의 워크플로우 최적화
- **실시간 피드백**: 개발 과정에서 지속적인 사용자 피드백 수집
- **안정적 동기화**: Notion API와의 안정적인 연동이 핵심
- **오프라인 지원**: 현장 환경에서의 네트워크 불안정 대응

---

**이 PRD는 OneSquare 통합 팀 관리 시스템의 완전한 개발 명세서입니다.**

**개발 시 CLAUDE.md의 기술적 제약사항을 반드시 준수해야 합니다.**