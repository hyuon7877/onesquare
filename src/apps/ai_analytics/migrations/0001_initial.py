# Generated by Django 4.2.14 on 2025-09-05 04:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('revenue', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModelConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='모델명')),
                ('model_type', models.CharField(choices=[('linear_regression', '선형 회귀'), ('polynomial_regression', '다항 회귀'), ('moving_average', '이동 평균'), ('exponential_smoothing', '지수 평활법'), ('simple_forecast', '단순 예측')], max_length=30, verbose_name='모델 유형')),
                ('status', models.CharField(choices=[('active', '활성'), ('inactive', '비활성'), ('training', '학습 중'), ('error', '오류')], default='active', max_length=20, verbose_name='상태')),
                ('parameters', models.JSONField(default=dict, verbose_name='모델 파라미터')),
                ('accuracy', models.FloatField(blank=True, null=True, verbose_name='정확도')),
                ('mae', models.FloatField(blank=True, null=True, verbose_name='평균 절대 오차')),
                ('rmse', models.FloatField(blank=True, null=True, verbose_name='평균 제곱근 오차')),
                ('description', models.TextField(blank=True, verbose_name='설명')),
                ('last_trained_at', models.DateTimeField(blank=True, null=True, verbose_name='마지막 학습 시간')),
                ('training_data_size', models.IntegerField(default=0, verbose_name='학습 데이터 크기')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='생성자')),
            ],
            options={
                'verbose_name': 'AI 모델 설정',
                'verbose_name_plural': 'AI 모델 설정들',
                'db_table': 'ai_model_config',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkEfficiencyAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_type', models.CharField(choices=[('individual', '개인별 분석'), ('team', '팀별 분석'), ('project', '프로젝트별 분석'), ('department', '부서별 분석')], max_length=20, verbose_name='분석 유형')),
                ('analysis_period_start', models.DateField(verbose_name='분석 기간 시작')),
                ('analysis_period_end', models.DateField(verbose_name='분석 기간 종료')),
                ('efficiency_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='효율성 점수')),
                ('efficiency_level', models.CharField(choices=[('excellent', '우수 (90% 이상)'), ('good', '양호 (70-90%)'), ('average', '보통 (50-70%)'), ('below_average', '미흡 (50% 미만)')], max_length=20, verbose_name='효율성 수준')),
                ('task_completion_rate', models.FloatField(blank=True, null=True, verbose_name='업무 완료율')),
                ('average_task_duration', models.FloatField(blank=True, null=True, verbose_name='평균 업무 소요 시간')),
                ('quality_score', models.FloatField(blank=True, null=True, verbose_name='품질 점수')),
                ('productivity_index', models.FloatField(blank=True, null=True, verbose_name='생산성 지수')),
                ('total_work_hours', models.FloatField(blank=True, null=True, verbose_name='총 근무 시간')),
                ('productive_hours', models.FloatField(blank=True, null=True, verbose_name='생산적 근무 시간')),
                ('overtime_hours', models.FloatField(blank=True, null=True, verbose_name='초과 근무 시간')),
                ('strengths', models.JSONField(default=list, verbose_name='강점 영역')),
                ('weaknesses', models.JSONField(default=list, verbose_name='개선 필요 영역')),
                ('recommendations', models.JSONField(default=list, verbose_name='개선 권고사항')),
                ('comparison_data', models.JSONField(default=dict, verbose_name='비교 데이터')),
                ('trend_analysis', models.TextField(blank=True, verbose_name='트렌드 분석')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analyzed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conducted_analyses', to=settings.AUTH_USER_MODEL, verbose_name='분석자')),
                ('target_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='revenue.project', verbose_name='대상 프로젝트')),
                ('target_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='efficiency_analyses', to=settings.AUTH_USER_MODEL, verbose_name='대상 사용자')),
            ],
            options={
                'verbose_name': '업무 효율성 분석',
                'verbose_name_plural': '업무 효율성 분석들',
                'db_table': 'work_efficiency_analysis',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['analysis_period_start', 'analysis_period_end'], name='work_effici_analysi_34a5cf_idx'), models.Index(fields=['efficiency_level'], name='work_effici_efficie_f57e9d_idx'), models.Index(fields=['target_user', 'created_at'], name='work_effici_target__341e95_idx')],
            },
        ),
        migrations.CreateModel(
            name='RevenuePrediction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prediction_type', models.CharField(choices=[('monthly', '월별 예측'), ('quarterly', '분기별 예측'), ('yearly', '연간 예측'), ('project', '프로젝트별 예측')], max_length=20, verbose_name='예측 유형')),
                ('prediction_date', models.DateField(verbose_name='예측 기준일')),
                ('target_period_start', models.DateField(verbose_name='예측 기간 시작')),
                ('target_period_end', models.DateField(verbose_name='예측 기간 종료')),
                ('predicted_amount', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='예측 매출액')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='신뢰도 점수')),
                ('confidence_level', models.CharField(choices=[('high', '높음 (90% 이상)'), ('medium', '보통 (70-90%)'), ('low', '낮음 (70% 미만)')], max_length=20, verbose_name='신뢰도 수준')),
                ('lower_bound', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='하한선')),
                ('upper_bound', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='상한선')),
                ('actual_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='실제 매출액')),
                ('prediction_error', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='예측 오차')),
                ('factors_considered', models.JSONField(default=list, verbose_name='고려된 요인들')),
                ('trend_analysis', models.TextField(blank=True, verbose_name='트렌드 분석')),
                ('notes', models.TextField(blank=True, verbose_name='메모')),
                ('is_validated', models.BooleanField(default=False, verbose_name='검증 완료')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='생성자')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_analytics.aimodelconfig', verbose_name='사용된 모델')),
            ],
            options={
                'verbose_name': '매출 예측',
                'verbose_name_plural': '매출 예측들',
                'db_table': 'revenue_prediction',
                'ordering': ['-prediction_date', '-created_at'],
                'indexes': [models.Index(fields=['prediction_date'], name='revenue_pre_predict_2d3928_idx'), models.Index(fields=['target_period_start', 'target_period_end'], name='revenue_pre_target__aa0d59_idx'), models.Index(fields=['confidence_level'], name='revenue_pre_confide_4a0f6f_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('performance_type', models.CharField(choices=[('sales', '영업 성과'), ('project', '프로젝트 성과'), ('team', '팀 성과'), ('financial', '재무 성과'), ('operational', '운영 성과')], max_length=20, verbose_name='성과 유형')),
                ('title', models.CharField(max_length=200, verbose_name='성과 분석 제목')),
                ('analysis_period_start', models.DateField(verbose_name='분석 기간 시작')),
                ('analysis_period_end', models.DateField(verbose_name='분석 기간 종료')),
                ('overall_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='종합 점수')),
                ('performance_grade', models.CharField(choices=[('A+', 'A+ (95점 이상)'), ('A', 'A (90-94점)'), ('B+', 'B+ (85-89점)'), ('B', 'B (80-84점)'), ('C+', 'C+ (75-79점)'), ('C', 'C (70-74점)'), ('D', 'D (70점 미만)')], max_length=5, verbose_name='성과 등급')),
                ('kpi_scores', models.JSONField(default=dict, verbose_name='KPI 점수들')),
                ('target_achievement_rate', models.FloatField(blank=True, null=True, verbose_name='목표 달성률')),
                ('revenue_generated', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='창출 매출')),
                ('cost_saved', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='절약 비용')),
                ('roi', models.FloatField(blank=True, null=True, verbose_name='투자 수익률')),
                ('qualitative_assessment', models.TextField(blank=True, verbose_name='정성적 평가')),
                ('achievements', models.JSONField(default=list, verbose_name='주요 성과')),
                ('challenges', models.JSONField(default=list, verbose_name='도전 과제')),
                ('improvement_areas', models.JSONField(default=list, verbose_name='개선 영역')),
                ('action_plans', models.JSONField(default=list, verbose_name='실행 계획')),
                ('next_period_goals', models.JSONField(default=list, verbose_name='다음 기간 목표')),
                ('previous_period_score', models.FloatField(blank=True, null=True, verbose_name='이전 기간 점수')),
                ('score_change', models.FloatField(blank=True, null=True, verbose_name='점수 변화')),
                ('peer_comparison', models.JSONField(default=dict, verbose_name='동료 비교')),
                ('analysis_methodology', models.TextField(blank=True, verbose_name='분석 방법론')),
                ('data_sources', models.JSONField(default=list, verbose_name='데이터 소스')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analyzed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conducted_performance_analyses', to=settings.AUTH_USER_MODEL, verbose_name='분석자')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_performance_analyses', to=settings.AUTH_USER_MODEL, verbose_name='검토자')),
                ('target_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='revenue.project', verbose_name='대상 프로젝트')),
                ('target_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='대상 사용자')),
            ],
            options={
                'verbose_name': '성과 분석',
                'verbose_name_plural': '성과 분석들',
                'db_table': 'performance_analysis',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['performance_type', 'created_at'], name='performance_perform_6b6c75_idx'), models.Index(fields=['target_user', 'analysis_period_start'], name='performance_target__0a7f5a_idx'), models.Index(fields=['overall_score'], name='performance_overall_3efc64_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnomalyDetection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('anomaly_type', models.CharField(choices=[('revenue_drop', '매출 급감'), ('revenue_spike', '매출 급증'), ('efficiency_drop', '효율성 저하'), ('cost_increase', '비용 급증'), ('pattern_change', '패턴 변화'), ('performance_issue', '성과 이슈')], max_length=30, verbose_name='이상 유형')),
                ('severity', models.CharField(choices=[('low', '낮음'), ('medium', '보통'), ('high', '높음'), ('critical', '긴급')], max_length=20, verbose_name='심각도')),
                ('status', models.CharField(choices=[('detected', '감지됨'), ('investigating', '조사 중'), ('resolved', '해결됨'), ('ignored', '무시됨')], default='detected', max_length=20, verbose_name='상태')),
                ('detected_at', models.DateTimeField(auto_now_add=True, verbose_name='감지 시간')),
                ('data_source', models.CharField(max_length=100, verbose_name='데이터 소스')),
                ('affected_metric', models.CharField(max_length=100, verbose_name='영향받은 지표')),
                ('expected_value', models.FloatField(blank=True, null=True, verbose_name='예상값')),
                ('actual_value', models.FloatField(blank=True, null=True, verbose_name='실제값')),
                ('deviation_percentage', models.FloatField(blank=True, null=True, verbose_name='편차율')),
                ('description', models.TextField(verbose_name='이상 상황 설명')),
                ('possible_causes', models.JSONField(default=list, verbose_name='가능한 원인들')),
                ('impact_assessment', models.TextField(blank=True, verbose_name='영향 평가')),
                ('recommended_actions', models.JSONField(default=list, verbose_name='권장 조치사항')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='해결 노트')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='해결 시간')),
                ('alert_sent', models.BooleanField(default=False, verbose_name='알림 발송 여부')),
                ('alert_recipients', models.JSONField(default=list, verbose_name='알림 수신자들')),
                ('investigated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='investigated_anomalies', to=settings.AUTH_USER_MODEL, verbose_name='조사자')),
                ('related_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='revenue.project', verbose_name='관련 프로젝트')),
                ('related_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='관련 사용자')),
            ],
            options={
                'verbose_name': '이상 패턴 감지',
                'verbose_name_plural': '이상 패턴 감지들',
                'db_table': 'anomaly_detection',
                'ordering': ['-detected_at'],
                'indexes': [models.Index(fields=['anomaly_type', 'severity'], name='anomaly_det_anomaly_1d29b7_idx'), models.Index(fields=['status', 'detected_at'], name='anomaly_det_status_124dcd_idx'), models.Index(fields=['related_user', 'detected_at'], name='anomaly_det_related_9c8c99_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIInsight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('insight_type', models.CharField(choices=[('trend', '트렌드 분석'), ('prediction', '예측 분석'), ('opportunity', '기회 발견'), ('risk', '리스크 분석'), ('optimization', '최적화 제안'), ('benchmark', '벤치마킹')], max_length=20, verbose_name='인사이트 유형')),
                ('title', models.CharField(max_length=200, verbose_name='제목')),
                ('priority', models.CharField(choices=[('low', '낮음'), ('medium', '보통'), ('high', '높음'), ('urgent', '긴급')], max_length=20, verbose_name='우선순위')),
                ('summary', models.TextField(verbose_name='요약')),
                ('detailed_analysis', models.TextField(verbose_name='상세 분석')),
                ('key_findings', models.JSONField(default=list, verbose_name='주요 발견사항')),
                ('supporting_data', models.JSONField(default=dict, verbose_name='뒷받침 데이터')),
                ('actionable_recommendations', models.JSONField(default=list, verbose_name='실행 가능한 권고사항')),
                ('expected_impact', models.TextField(blank=True, verbose_name='예상 효과')),
                ('implementation_steps', models.JSONField(default=list, verbose_name='구현 단계')),
                ('related_models', models.JSONField(default=list, verbose_name='관련 모델들')),
                ('data_confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='데이터 신뢰도')),
                ('target_audience', models.JSONField(default=list, verbose_name='대상 독자')),
                ('affected_areas', models.JSONField(default=list, verbose_name='영향 영역')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성 상태')),
                ('is_read', models.BooleanField(default=False, verbose_name='읽음 상태')),
                ('is_implemented', models.BooleanField(default=False, verbose_name='구현 상태')),
                ('feedback_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='피드백 점수')),
                ('feedback_comments', models.TextField(blank=True, verbose_name='피드백 댓글')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('generated_by_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_analytics.aimodelconfig', verbose_name='생성 모델')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='검토자')),
            ],
            options={
                'verbose_name': 'AI 인사이트',
                'verbose_name_plural': 'AI 인사이트들',
                'db_table': 'ai_insight',
                'ordering': ['-priority', '-created_at'],
                'indexes': [models.Index(fields=['insight_type', 'priority'], name='ai_insight_insight_b08f05_idx'), models.Index(fields=['is_active', 'created_at'], name='ai_insight_is_acti_c8ce6b_idx'), models.Index(fields=['data_confidence'], name='ai_insight_data_co_c070a9_idx')],
            },
        ),
    ]
