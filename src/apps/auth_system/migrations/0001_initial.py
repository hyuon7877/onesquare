# Generated by Django 4.2.14 on 2025-09-04 14:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('super_admin', '최고관리자'), ('manager', '중간관리자'), ('team_member', '팀원'), ('partner', '파트너'), ('contractor', '도급사'), ('custom', '커스텀')], default='team_member', max_length=20, verbose_name='사용자 타입')),
                ('auth_method', models.CharField(choices=[('email_password', '이메일+비밀번호'), ('otp_sms', 'SMS OTP'), ('otp_email', '이메일 OTP')], default='email_password', max_length=20, verbose_name='인증 방식')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='전화번호 형식: 010-1234-5678 또는 01012345678', regex='^01[0-9]-?\\d{3,4}-?\\d{4}$')], verbose_name='전화번호')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles/%Y/%m/', verbose_name='프로필 이미지')),
                ('company', models.CharField(blank=True, max_length=100, null=True, verbose_name='회사/소속')),
                ('department', models.CharField(blank=True, max_length=50, null=True, verbose_name='부서')),
                ('position', models.CharField(blank=True, max_length=50, null=True, verbose_name='직책')),
                ('is_approved', models.BooleanField(default=False, verbose_name='계정 승인 여부')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='마지막 로그인 IP')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자들',
                'db_table': 'auth_custom_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='세션 키')),
                ('ip_address', models.GenericIPAddressField(verbose_name='접속 IP')),
                ('user_agent', models.TextField(blank=True, null=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 시간')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='마지막 활동')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성 상태')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '사용자 세션',
                'verbose_name_plural': '사용자 세션들',
                'db_table': 'auth_user_session',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(choices=[('super_admin', '최고관리자'), ('manager', '중간관리자'), ('team_member', '팀원'), ('partner', '파트너'), ('contractor', '도급사'), ('custom', '커스텀')], max_length=20, unique=True, verbose_name='사용자 타입')),
                ('description', models.TextField(blank=True, null=True, verbose_name='그룹 설명')),
                ('can_access_dashboard', models.BooleanField(default=False, verbose_name='대시보드 접근')),
                ('can_manage_users', models.BooleanField(default=False, verbose_name='사용자 관리')),
                ('can_view_reports', models.BooleanField(default=False, verbose_name='리포트 조회')),
                ('can_manage_calendar', models.BooleanField(default=False, verbose_name='캘린더 관리')),
                ('can_access_field_reports', models.BooleanField(default=False, verbose_name='현장 리포트 접근')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth.group', verbose_name='Django 그룹')),
            ],
            options={
                'verbose_name': '사용자 그룹 정보',
                'verbose_name_plural': '사용자 그룹 정보들',
                'db_table': 'auth_user_group_info',
            },
        ),
        migrations.CreateModel(
            name='OTPCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6, verbose_name='OTP 코드')),
                ('delivery_method', models.CharField(choices=[('sms', 'SMS'), ('email', '이메일')], max_length=10, verbose_name='전송 방법')),
                ('delivery_target', models.CharField(max_length=100, verbose_name='전송 대상')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 시간')),
                ('is_used', models.BooleanField(default=False, verbose_name='사용 여부')),
                ('used_at', models.DateTimeField(blank=True, null=True, verbose_name='사용 시간')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': 'OTP 코드',
                'verbose_name_plural': 'OTP 코드들',
                'db_table': 'auth_otp_code',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OTPToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=6, verbose_name='OTP 토큰')),
                ('otp_type', models.CharField(choices=[('sms', 'SMS'), ('email', '이메일')], max_length=10, verbose_name='OTP 타입')),
                ('destination', models.CharField(help_text='전화번호 또는 이메일 주소', max_length=100, verbose_name='발송 대상')),
                ('status', models.CharField(choices=[('pending', '대기 중'), ('verified', '인증 완료'), ('expired', '만료됨'), ('failed', '실패')], default='pending', max_length=10, verbose_name='상태')),
                ('attempt_count', models.IntegerField(default=0, verbose_name='시도 횟수')),
                ('max_attempts', models.IntegerField(default=3, verbose_name='최대 시도 횟수')),
                ('expires_at', models.DateTimeField(verbose_name='만료 시간')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='인증 완료 시간')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='메타데이터')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otp_tokens', to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': 'OTP 토큰',
                'verbose_name_plural': 'OTP 토큰들',
                'db_table': 'auth_otp_token',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'status'], name='auth_otp_to_user_id_4bc0dc_idx'), models.Index(fields=['token', 'expires_at'], name='auth_otp_to_token_5a515c_idx')],
            },
        ),
    ]
